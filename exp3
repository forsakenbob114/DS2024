#include <iostream>
#include <queue>
#include <vector>
#include <string>
#include <unordered_map>

using Rank = unsigned int;

template <typename T> struct BinNode;
template <typename T> using BinNodePosi = BinNode<T>*;

template <typename T> struct BinNode {
    T data;
    BinNodePosi<T> parent, lc, rc;
    Rank height;
    Rank npl;

    BinNode(T e, BinNodePosi<T> p = nullptr, BinNodePosi<T> lc = nullptr, BinNodePosi<T> rc = nullptr, int h = 0, int l = 1)
        : data(e), parent(p), lc(lc), rc(rc), height(h), npl(l) {
        if (lc) lc->parent = this;
        if (rc) rc->parent = this;
    }

    Rank size() const;
    Rank updateHeight();
    void updateAllHeights();
    BinNodePosi<T> insertLeft(T const&);
    BinNodePosi<T> insertRight(T const&);
    void attachLeft(BinNodePosi<T>);
    void attachRight(BinNodePosi<T>);
    BinNodePosi<T> successor();

    template <typename VST> void traverseLevel(VST& visit);
    template <typename VST> void traversePre(VST& visit);
    template <typename VST> void traverseIn(VST& visit);
    template <typename VST> void traversePost(VST& visit);
};

template <typename T>
Rank BinNode<T>::size() const {
    Rank s = 1;
    if (lc) s += lc->size();
    if (rc) s += rc->size();
    return s;
}

template <typename T>
Rank BinNode<T>::updateHeight() {
    Rank hl = lc ? lc->height : -1;
    Rank hr = rc ? rc->height : -1;
    height = std::max(hl, hr) + 1;
    return height;
}

template <typename T>
void BinNode<T>::updateAllHeights() {
    BinNode<T>* p = this;
    while (p) {
        p->updateHeight();
        p = p->parent;
    }
}

template <typename T>
BinNode<T>* BinNode<T>::insertLeft(T const& e) {
    lc = new BinNode<T>(e, this);
    updateAllHeights();
    return lc;
}

template <typename T>
BinNode<T>* BinNode<T>::insertRight(T const& e) {
    rc = new BinNode<T>(e, this);
    updateAllHeights();
    return rc;
}

template <typename T>
void BinNode<T>::attachLeft(BinNodePosi<T> t) {
    lc = t;
    if (t) t->parent = this;
    updateAllHeights();
}

template <typename T>
void BinNode<T>::attachRight(BinNodePosi<T> t) {
    rc = t;
    if (t) t->parent = this;
    updateAllHeights();
}

template <typename T>
BinNode<T>* BinNode<T>::successor() {
    BinNode<T>* p = this;
    if (rc) {
        p = rc;
        while (p->lc) p = p->lc;
    }
    else {
        while (p->parent && p == p->parent->rc) p = p->parent;
        p = p->parent;
    }
    return p;
}

template <typename T>
template <typename VST>
void BinNode<T>::traverseLevel(VST& visit) {
    std::queue<BinNode<T>*> q;
    q.push(this);
    while (!q.empty()) {
        BinNode<T>* node = q.front();
        q.pop();
        visit(node->data);
        if (node->lc) q.push(node->lc);
        if (node->rc) q.push(node->rc);
    }
}

template <typename T>
template <typename VST>
void BinNode<T>::traversePre(VST& visit) {
    visit(data);
    if (lc) lc->traversePre(visit);
    if (rc) rc->traversePre(visit);
}

template <typename T>
template <typename VST>
void BinNode<T>::traverseIn(VST& visit) {
    if (lc) lc->traverseIn(visit);
    visit(data);
    if (rc) rc->traverseIn(visit);
}

template <typename T>
template <typename VST>
void BinNode<T>::traversePost(VST& visit) {
    if (lc) lc->traversePost(visit);
    if (rc) rc->traversePost(visit);
    visit(data);
}

template <typename T> class BinTree {
protected:
    Rank _size;
    BinNodePosi<T> _root;

public:
    BinTree() : _size(0), _root(nullptr) {}
    ~BinTree() { if (_size > 0) remove(_root); }
    BinTree(BinTree<T> const&);
    Rank size() const { return _size; }
    bool empty() const { return !_root; }
    BinNodePosi<T> root() const { return _root; }

    BinNodePosi<T> insert(T const&);
    BinNodePosi<T> insert(T const&, BinNodePosi<T>);
    BinNodePosi<T> insert(BinNodePosi<T>, T const&);
    Rank remove(BinNodePosi<T>);
    BinTree<T>* secede(BinNodePosi<T>);

    template <typename VST> void traverseLevel(VST& visit) { if (_root) _root->traverseLevel(visit); }
    template <typename VST> void traversePre(VST& visit) { if (_root) _root->traversePre(visit); }
    template
