#1.
typedef int Rank;  //秩
#define DEFAULT_CAPACITY 3 //默认的初始容量（实际应用中可设置为更大）

template <typename T> class Vector {  //向量模板类
protected:
    Rank _size; int _capacity; T* _elem;  //规模、容量、数据区
    void copyFrom ( T const* A, Rank lo, Rank hi );  //复制数组区间A[lo, hi]
    void expand();  //空间不足时扩容
    void shrink();  //装填因子过小时压缩
    bool bubble ( Rank lo, Rank hi );  //扫描交换
    void bubbleSort ( Rank lo, Rank hi );  //起泡排序算法
    Rank max ( Rank lo, Rank hi );  //选取最大元素
    void selectionSort ( Rank lo, Rank hi );  //选择排序算法
    void merge ( Rank lo, Rank mi, Rank hi );  //归并算法
    void mergeSort ( Rank lo, Rank hi );  //归并排序算法
    Rank partition ( Rank lo, Rank hi );  //轴点构造算法
    void quickSort ( Rank lo, Rank hi );  //快速排序算法
    void heapSort ( Rank lo, Rank hi );  //堆排序（稍后结合完全堆讲解）

public:
// 构造函数
Vector ( int c = DEFAULT_CAPACITY, int s = 0, T v = 0 )  //容量为c，规模为s，所有元素初始化为v
{ _elem = new T[_capacity = c]; for (_size = 0; _size < s; _elem[_size++] = v ); }  //s<=c
Vector ( T const* A, Rank n ) { copyFrom ( A, 0, n ); }  //数组整体复制
Vector ( T const* A, Rank lo, Rank hi ) { copyFrom ( A, lo, hi ); }  //区间
Vector ( Vector<T> const& V ) { copyFrom ( V._elem, 0, V._size ); }  //向量整体复制
Vector ( Vector<T> const& V, Rank lo, Rank hi ) { copyFrom ( V._elem, lo, hi ); }  //区间

// 析构函数
~Vector() { delete [] _elem; }  //释放内部空间

// 只读访问接口
Rank size() const { return _size; }  //规模
bool empty() const { return !_size; }  //判空
int disordered() const;  //判断向量是否已排序
Rank find ( T const& e, Rank lo, Rank hi ) const;  //无序向量区间查找
Rank find ( T const& e ) const { return find ( e, 0, _size ); }  //无序向量整体查找
Rank search ( T const& e, Rank lo, Rank hi ) const;  //有序向量区间查找
Rank search ( T const& e ) const { return ( 0 >= _size ) ? -1 : search ( e, 0, _size ); }  //有序向量整体查找

// 可写访问接口
T& operator[] ( Rank r ) const;  //重载下标操作符，可以类似于数组形式引用元素
Vector<T>& operator= ( Vector<T> const& );  //重载赋值操作符，以便直接克隆向量
T remove ( Rank r );  //删除秩为r的元素
int remove ( Rank lo, Rank hi );  //删除区间[lo, hi)之内的元素
Rank insert ( Rank r, T const& e );  //插入元素
Rank insert ( T const& e ) { return insert ( _size, e ); }  //默认作为末元素插入
void sort ( Rank lo, Rank hi );  //对[lo, hi)排序
void sort() { sort ( 0, _size ); }  //整体排序
void unsort ( Rank lo, Rank hi );  //对[lo, hi)置乱
void unsort() { unsort ( 0, _size ); }  //整体置乱
int deduplicate();  //无序去重
int uniquify();  //有序去重
// 遍历
void traverse(void(*)(T&));
template<typename VST>void traverse(VST&);
};

#2.
#include <iostream>
#include <vector>
#include <cmath>
#include <ctime>
#include <algorithm>
using namespace std;

class Complex {
public:
    double real, imag;

    Complex(double r = 0, double i = 0) : real(r), imag(i) {}

    double modulus() const {
        return sqrt(real * real + imag * imag);
    }

    bool operator==(const Complex& other) const {
        return real == other.real && imag == other.imag;
    }

    bool operator<(const Complex& other) const {
        if (modulus() == other.modulus()) {
            return real < other.real;
        }
        return modulus() < other.modulus();
    }

    friend ostream& operator<<(ostream& os, const Complex& c) {
        os << "(" << c.real << " + " << c.imag << "i)";
        return os;
    }
};

vector<Complex> generateRandomComplexVector(int size) {
    vector<Complex> v;
    for (int i = 0; i < size; ++i) {
        double real = rand() % 100 - 50;  // 实部范围[-50, 50]
        double imag = rand() % 100 - 50;  // 虚部范围[-50, 50]
        v.push_back(Complex(real, imag));
    }
    return v;
}

void shuffleVector(vector<Complex>& v) {
    random_shuffle(v.begin(), v.end());
}

int findComplex(const vector<Complex>& v, const Complex& target) {
    for (int i = 0; i < v.size(); ++i) {
        if (v[i] == target) {
            return i;
        }
    }
    return -1;
}

void insertComplex(vector<Complex>& v, const Complex& c) {
    v.push_back(c);
}

void deleteComplex(vector<Complex>& v, const Complex& c) {
    auto it = remove(v.begin(), v.end(), c);
    v.erase(it, v.end());
}

void uniquify(vector<Complex>& v) {
    sort(v.begin(), v.end());
    auto it = unique(v.begin(), v.end());
    v.erase(it, v.end());
}

void bubbleSort(vector<Complex>& v) {
    for (int i = 0; i < v.size() - 1; ++i) {
        for (int j = 0; j < v.size() - i - 1; ++j) {
            if (v[j] > v[j + 1]) {
                swap(v[j], v[j + 1]);
            }
        }
    }
}

void merge(vector<Complex>& v, int left, int mid, int right) {
    vector<Complex> temp(right - left + 1);
    int i = left, j = mid + 1, k = 0;

    while (i <= mid && j <= right) {
        if (v[i] <= v[j]) {
            temp[k++] = v[i++];
        } else {
            temp[k++] = v[j++];
        }
    }

    while (i <= mid) temp[k++] = v[i++];
    while (j <= right) temp[k++] = v[j++];

    for (int i = 0; i < k; ++i) {
        v[left + i] = temp[i];
    }
}

void mergeSort(vector<Complex>& v, int left, int right) {
    if (left >= right) return;
    int mid = (left + right) / 2;
    mergeSort(v, left, mid);
    mergeSort(v, mid + 1, right);
    merge(v, left, mid, right);
}

vector<Complex> findInRange(const vector<Complex>& v, double m1, double m2) {
    vector<Complex> result;
    for (const auto& c : v) {
        double mod = c.modulus();
        if (mod >= m1 && mod < m2) {
            result.push_back(c);
        }
    }
    return result;
}

void printVector(const vector<Complex>& v) {
    for (const auto& c : v) {
        cout << c << " ";
    }
    cout << endl;
}

int main() {
    srand((unsigned)time(0));
    const int size = 10;
    vector<Complex> v = generateRandomComplexVector(size);
    
    cout << "Initial random vector:" << endl;
    printVector(v);


    shuffleVector(v);
    cout << "Shuffled vector:" << endl;
    printVector(v);

  
    Complex target(1, 1);  // 示例查找(1 + 1i)
    int index = findComplex(v, target);
    if (index != -1) {
        cout << "Found " << target << " at index " << index << endl;
    } else {
        cout << target << " not found." << endl;
    }

 
    Complex toInsert(2, 3);
    insertComplex(v, toInsert);
    cout << "After inserting " << toInsert << ":" << endl;
    printVector(v);

 
    deleteComplex(v, toInsert);
    cout << "After deleting " << toInsert << ":" << endl;
    printVector(v);

  
    uniquify(v);
    cout << "After uniquify (removing duplicates):" << endl;
    printVector(v);


    clock_t start, end;

   
    vector<Complex> bubbleVec = v;
    start = clock();
    bubbleSort(bubbleVec);
    end = clock();
    cout << "Bubble sort time: " << double(end - start) / CLOCKS_PER_SEC << " seconds" << endl;


    vector<Complex> mergeVec = v;
    start = clock();
    mergeSort(mergeVec, 0, mergeVec.size() - 1);
    end = clock();
    cout << "Merge sort time: " << double(end - start) / CLOCKS_PER_SEC << " seconds" << endl;

    cout << "Sorted vector:" << endl;
    printVector(mergeVec);

    
    double m1 = 5.0, m2 = 10.0;
    vector<Complex> inRange = findInRange(mergeVec, m1, m2);
    cout << "Complex numbers with modulus in [" << m1 << ", " << m2 << "):" << endl;
    printVector(inRange);

    return 0;
}














































































